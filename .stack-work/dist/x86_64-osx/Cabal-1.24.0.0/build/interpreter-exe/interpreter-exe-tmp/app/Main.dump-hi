
==================== FINAL INTERFACE ====================
2016-12-18 11:37:34.01448 UTC

interface main@main:Main 8001
  interface hash: 2bd88328d88ce329e9971d537791e475
  ABI hash: 4c27c46e1edc58161684574d91d99601
  export-list hash: f9d032a9a55e8bd06b28d32bf31a4f7a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: dae07586c0e1fa4780fe80820192c926
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.programFromText
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      interpreter-0.1.0.0@interpreter-0.1.0.0-4t3ZNL3Kouy2a8LgHlUI1M
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  interpreter-0.1.0.0@interpreter-0.1.0.0-4t3ZNL3Kouy2a8LgHlUI1M:Interpreter 068c04c683508dff94e3d8808dfc7139
8ae995a39cdb53b975a843c6ade1975f
  $s$fReadWriterT1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> [(Control.Monad.Trans.Writer.Lazy.WriterT
           Interpreter.Statement Data.Functor.Identity.Identity (),
         GHC.Base.String)]
  {- Unfolding: (Control.Monad.Trans.Writer.Lazy.$w$cliftReadsPrec
                   @ Interpreter.Statement
                   @ Data.Functor.Identity.Identity
                   Interpreter.$fReadStatement
                   Data.Functor.Classes.$fRead1Identity
                   @ ()
                   GHC.Read.$fRead()_$creadsPrec) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
1f408139192518013d127432e25b7f63
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b6a0ba2f86181f5a225def466bc393c9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Main.programFromText ipv3)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                <Interpreter.Statement>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.N:Identity[0]
                                <((), Interpreter.Statement)>_R)) of ww { (,) ww1 ww2 ->
                 Interpreter.$wrun ww2 ipv2 } } }) -}
83b7686b1d023b65d761e8ffd5c6ee88
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "../test.input"#) -}
73757c63f77d762a9edbd4e05dd178e2
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
77a18e7b79c5f95e4ac7cfe9ec44d1a4
  programFromText :: GHC.Base.String -> Interpreter.Program
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ (Control.Monad.Trans.Writer.Lazy.WriterT
                             Interpreter.Statement Data.Functor.Identity.Identity ())
                        Main.programFromText3
                        @ Interpreter.Program
                        (Text.Read.readEither5 @ Interpreter.Program) of ww { Unit# ww1 ->
                 case Text.Read.readEither6
                        @ Interpreter.Program
                        (Text.ParserCombinators.ReadP.run
                           @ Interpreter.Program
                           (Text.ParserCombinators.ReadP.Look @ Interpreter.Program ww1)
                           s) of wild {
                   [] -> Main.programFromText2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> Main.programFromText1 } } }) -}
61c6f36d8d44d38b6fe88d937faae662
  programFromText1 :: Interpreter.Program
  {- Strictness: x -}
06c27be4b36b555570d6ff5807af7c5b
  programFromText2 :: Interpreter.Program
  {- Strictness: x -}
7103c2d7c0facb6963d3b136f13d50ae
  programFromText3 ::
    GHC.Base.String
    -> [(Control.Monad.Trans.Writer.Lazy.WriterT
           Interpreter.Statement Data.Functor.Identity.Identity (),
         GHC.Base.String)]
  {- Unfolding: (Main.$s$fReadWriterT1
                   Text.ParserCombinators.ReadPrec.minPrec) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

