
==================== FINAL INTERFACE ====================
2016-12-18 11:34:57.219745 UTC

interface interpreter-0.1.0.0-4t3ZNL3Kouy2a8LgHlUI1M:Interpreter 8001
  interface hash: 01c10ec8007dd92211e2b1371ffd2c75
  ABI hash: 068c04c683508dff94e3d8808dfc7139
  export-list hash: 38f653b1d5238d3877a570725c9613ec
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d789b72f8d433eb44e4136096bd26982
  sig of: Nothing
  used TH splices: False
  where
exports:
  Interpreter.run
  Interpreter.Program
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Functor.Identity eef8b7d6233156345b1fd0db19552a3c
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 8f3eaf1368a7ea27857993e3febae6a3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Error.Class f139fe3464686c34428880c6a5173636
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Except 99ba8f4995df0e7f2f512551a0ca666a
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Trans 0a058c68d8234a5f23a0f2e61a261faf
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Except 71b1d86204f6908788cb5223e3c73193
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State 8d226555bc2686d0ea757e495e63698c
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 16a585e7f12cd771300b3cab638df233
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Writer f2e93e473b41a2c9d937cc9be25c2efe
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Writer.Lazy fddf2f22dc507f4f4168c5e3805cb667
fixities infixl 1 .=
34b9940d7762acc4d3206d814cf7564d
  $fEqExpr :: GHC.Classes.Eq Interpreter.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Expr
                  Interpreter.$fEqExpr_$c==
                  Interpreter.$fEqExpr_$c/= -}
34b9940d7762acc4d3206d814cf7564d
  $fEqExpr_$c/= ::
    Interpreter.Expr -> Interpreter.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Interpreter.Expr) (b :: Interpreter.Expr) ->
                 case Interpreter.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34b9940d7762acc4d3206d814cf7564d
  $fEqExpr_$c== ::
    Interpreter.Expr -> Interpreter.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
67e54eba5d182beb65be48de09c11740
  $fEqStatement :: GHC.Classes.Eq Interpreter.Statement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Statement
                  Interpreter.$fEqStatement_$c==
                  Interpreter.$fEqStatement_$c/= -}
67e54eba5d182beb65be48de09c11740
  $fEqStatement_$c/= ::
    Interpreter.Statement -> Interpreter.Statement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Interpreter.Statement) (b :: Interpreter.Statement) ->
                 case Interpreter.$fEqStatement_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
67e54eba5d182beb65be48de09c11740
  $fEqStatement_$c== ::
    Interpreter.Statement -> Interpreter.Statement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
25d8e83048567a92b4405fd5d28cea33
  $fEqVal :: GHC.Classes.Eq Interpreter.Val
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Val
                  Interpreter.$fEqVal_$c==
                  Interpreter.$fEqVal_$c/= -}
25d8e83048567a92b4405fd5d28cea33
  $fEqVal_$c/= ::
    Interpreter.Val -> Interpreter.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Interpreter.Val) (b :: Interpreter.Val) ->
                 case a of wild {
                   Interpreter.I a1
                   -> case b of wild1 {
                        Interpreter.I b1
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }
                        Interpreter.B ipv -> GHC.Types.True }
                   Interpreter.B a1
                   -> case b of wild1 {
                        Interpreter.I ipv -> GHC.Types.True
                        Interpreter.B b1
                        -> case a1 of wild2 {
                             GHC.Types.False -> b1
                             GHC.Types.True
                             -> case b1 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
25d8e83048567a92b4405fd5d28cea33
  $fEqVal_$c== ::
    Interpreter.Val -> Interpreter.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Interpreter.Val) (ds1 :: Interpreter.Val) ->
                 case ds of wild {
                   Interpreter.I a1
                   -> case ds1 of wild1 {
                        Interpreter.I b1 -> GHC.Classes.eqInt a1 b1
                        Interpreter.B ipv -> GHC.Types.False }
                   Interpreter.B a1
                   -> case ds1 of wild1 {
                        Interpreter.I ipv -> GHC.Types.False
                        Interpreter.B b1 -> GHC.Classes.$fEqBool_$c== a1 b1 } }) -}
67e54eba5d182beb65be48de09c11740
  $fMonoidStatement :: GHC.Base.Monoid Interpreter.Statement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Statement
                  Interpreter.Pass
                  Interpreter.Seq
                  Interpreter.$fMonoidStatement_$cmconcat -}
67e54eba5d182beb65be48de09c11740
  $fMonoidStatement_$cmconcat ::
    [Interpreter.Statement] -> Interpreter.Statement
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [Interpreter.Statement]) ->
                 Interpreter.$fMonoidStatement_go eta) -}
67e54eba5d182beb65be48de09c11740
  $fMonoidStatement_go ::
    [Interpreter.Statement] -> Interpreter.Statement
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b9275a12289d3a1807a641f5c38be4dd
  $fPrettyExpr[]Int ::
    Interpreter.PrettyExpr GHC.Base.String GHC.Types.Int
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Int
                  Interpreter.$fPrettyExpr[]Int_$c.*
                  Interpreter.$fPrettyExpr[]Int_$c.- -}
a49a114f407a833532b1ff152cd33a91
  $fPrettyExpr[]Int_$c.* ::
    GHC.Base.String -> GHC.Types.Int -> Interpreter.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String) (y :: GHC.Types.Int) ->
                 Interpreter.Mul
                   (Interpreter.Var x)
                   (Interpreter.Const (Interpreter.I y))) -}
32c73ceea170d5b1a4dcd490b542b916
  $fPrettyExpr[]Int_$c.- ::
    GHC.Base.String -> GHC.Types.Int -> Interpreter.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String) (y :: GHC.Types.Int) ->
                 Interpreter.Sub
                   (Interpreter.Var x)
                   (Interpreter.Const (Interpreter.I y))) -}
b9275a12289d3a1807a641f5c38be4dd
  $fPrettyExpr[][] ::
    Interpreter.PrettyExpr GHC.Base.String GHC.Base.String
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Base.String
                  Interpreter.$fPrettyExpr[][]_$c.*
                  Interpreter.$fPrettyExpr[][]_$c.- -}
1ffdfc95022320aca176f646ccde1ad9
  $fPrettyExpr[][]_$c.* ::
    GHC.Base.String -> GHC.Base.String -> Interpreter.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String) (y :: GHC.Base.String) ->
                 Interpreter.Mul (Interpreter.Var x) (Interpreter.Var y)) -}
05bedb0d715936adaa03cf157b15ce74
  $fPrettyExpr[][]_$c.- ::
    GHC.Base.String -> GHC.Base.String -> Interpreter.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String) (y :: GHC.Base.String) ->
                 Interpreter.Sub (Interpreter.Var x) (Interpreter.Var y)) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr :: GHC.Read.Read Interpreter.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Expr
                  Interpreter.$fReadExpr_$creadsPrec
                  Interpreter.$fReadExpr_$creadList
                  Interpreter.$fReadExpr_$creadPrec
                  Interpreter.$fReadExpr_$creadListPrec -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Interpreter.Expr] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Interpreter.Expr] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Interpreter.Expr
                   Interpreter.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Expr>_R))
                   @ b
                   eta1) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Interpreter.Expr
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Interpreter.Expr
                   Interpreter.$fReadExpr3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Interpreter.Expr>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Interpreter.Expr>_R)))) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Interpreter.Expr -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Interpreter.Expr -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Interpreter.$w$creadPrec ww1 @ b w1 }) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr4 :: Text.ParserCombinators.ReadP.P [Interpreter.Expr]
  {- Unfolding: (GHC.Read.$wlist
                   @ Interpreter.Expr
                   Interpreter.$fReadExpr2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Expr>_R))
                   @ [Interpreter.Expr]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Interpreter.Expr])) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Interpreter.Expr]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Interpreter.Expr]
                   Interpreter.$fReadExpr4) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Interpreter.Expr]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadExpr1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Interpreter.Expr]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Interpreter.Expr]>_R))) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Interpreter.Expr
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadExpr2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Interpreter.Expr>_R)) -}
34b9940d7762acc4d3206d814cf7564d
  $fReadExpr_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Interpreter.Expr
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Interpreter.Expr
                   ((GHC.Read.$fReadDouble10
                       @ Interpreter.Expr
                       Interpreter.$fReadExpr3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Interpreter.Expr>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Interpreter.Expr>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Interpreter.Expr>_R)
                      @ Interpreter.Expr
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Interpreter.Expr))) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement :: GHC.Read.Read Interpreter.Statement
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Statement
                  Interpreter.$fReadStatement_$creadsPrec
                  Interpreter.$fReadStatement_$creadList
                  Interpreter.$fReadStatement_$creadPrec
                  Interpreter.$fReadStatement_$creadListPrec -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Interpreter.Statement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Interpreter.Statement]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Interpreter.Statement
                   Interpreter.$fReadStatement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Statement>_R))
                   @ b
                   eta1) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Interpreter.Statement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Interpreter.Statement
                   Interpreter.$fReadStatement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Interpreter.Statement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Interpreter.Statement>_R)))) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Interpreter.Statement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement4 ::
    Text.ParserCombinators.ReadP.P [Interpreter.Statement]
  {- Unfolding: (GHC.Read.$wlist
                   @ Interpreter.Statement
                   Interpreter.$fReadStatement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Statement>_R))
                   @ [Interpreter.Statement]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Interpreter.Statement])) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Interpreter.Statement]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Interpreter.Statement]
                   Interpreter.$fReadStatement4) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Interpreter.Statement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadStatement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Interpreter.Statement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Interpreter.Statement]>_R))) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Interpreter.Statement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadStatement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Interpreter.Statement>_R)) -}
67e54eba5d182beb65be48de09c11740
  $fReadStatement_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Interpreter.Statement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Interpreter.Statement
                   ((GHC.Read.$fReadDouble10
                       @ Interpreter.Statement
                       Interpreter.$fReadStatement3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Interpreter.Statement>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Interpreter.Statement>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Interpreter.Statement>_R)
                      @ Interpreter.Statement
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Interpreter.Statement))) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal :: GHC.Read.Read Interpreter.Val
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Val
                  Interpreter.$fReadVal_$creadsPrec
                  Interpreter.$fReadVal_$creadList
                  Interpreter.$fReadVal_$creadPrec
                  Interpreter.$fReadVal_$creadListPrec -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Interpreter.Val] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Interpreter.Val] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Interpreter.Val
                   Interpreter.$fReadVal2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Val>_R))
                   @ b
                   eta1) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Interpreter.Val
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Interpreter.Val
                   Interpreter.$fReadVal3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Interpreter.Val>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Interpreter.Val>_R)))) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Interpreter.Val -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Interpreter.Val -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Interpreter.$w$creadPrec1 ww1 @ b w1 }) -}
86916c7bc46b71122fb387ce5f567ada
  $fReadVal4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I"#) -}
035e030f9db3fda913ae7df8c4fc9520
  $fReadVal5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
33b6e16803a72310929a2728de5af70b
  $fReadVal6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B"#) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal7 :: Text.ParserCombinators.ReadP.P [Interpreter.Val]
  {- Unfolding: (GHC.Read.$wlist
                   @ Interpreter.Val
                   Interpreter.$fReadVal2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Interpreter.Val>_R))
                   @ [Interpreter.Val]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Interpreter.Val])) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Interpreter.Val]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Interpreter.Val]
                   Interpreter.$fReadVal7) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Interpreter.Val]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadVal1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Interpreter.Val]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Interpreter.Val]>_R))) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Interpreter.Val
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Interpreter.$fReadVal2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Interpreter.Val>_R)) -}
25d8e83048567a92b4405fd5d28cea33
  $fReadVal_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Interpreter.Val
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Interpreter.Val
                   ((GHC.Read.$fReadDouble10
                       @ Interpreter.Val
                       Interpreter.$fReadVal3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Interpreter.Val>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Interpreter.Val>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Interpreter.Val>_R)
                      @ Interpreter.Val
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Interpreter.Val))) -}
34b9940d7762acc4d3206d814cf7564d
  $fShowExpr :: GHC.Show.Show Interpreter.Expr
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Expr
                  Interpreter.$fShowExpr_$cshowsPrec
                  Interpreter.$fShowExpr_$cshow
                  Interpreter.$fShowExpr_$cshowList -}
34b9940d7762acc4d3206d814cf7564d
  $fShowExpr1 :: Interpreter.Expr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Interpreter.Expr) (w1 :: GHC.Base.String) ->
                 Interpreter.$w$cshowsPrec 0# w w1) -}
34b9940d7762acc4d3206d814cf7564d
  $fShowExpr_$cshow :: Interpreter.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Interpreter.Expr) ->
                 Interpreter.$fShowExpr_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
34b9940d7762acc4d3206d814cf7564d
  $fShowExpr_$cshowList :: [Interpreter.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Interpreter.Expr
                   Interpreter.$fShowExpr1) -}
34b9940d7762acc4d3206d814cf7564d
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Interpreter.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Interpreter.Expr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Interpreter.$w$cshowsPrec ww1 w1 w2 }) -}
67e54eba5d182beb65be48de09c11740
  $fShowStatement :: GHC.Show.Show Interpreter.Statement
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Statement
                  Interpreter.$fShowStatement_$cshowsPrec
                  Interpreter.$fShowStatement_$cshow
                  Interpreter.$fShowStatement_$cshowList -}
67e54eba5d182beb65be48de09c11740
  $fShowStatement1 :: Interpreter.Statement -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Interpreter.$fShowStatement_$cshowsPrec
                   Interpreter.$fShowStatement2) -}
6feab1e86e1d9ebaff68464e6c290d64
  $fShowStatement2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
67e54eba5d182beb65be48de09c11740
  $fShowStatement_$cshow :: Interpreter.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Interpreter.Statement) ->
                 Interpreter.$fShowStatement_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
67e54eba5d182beb65be48de09c11740
  $fShowStatement_$cshowList ::
    [Interpreter.Statement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Interpreter.Statement
                   Interpreter.$fShowStatement1) -}
67e54eba5d182beb65be48de09c11740
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Interpreter.Statement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
25d8e83048567a92b4405fd5d28cea33
  $fShowVal :: GHC.Show.Show Interpreter.Val
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Interpreter.Val
                  Interpreter.$fShowVal_$cshowsPrec
                  Interpreter.$fShowVal_$cshow
                  Interpreter.$fShowVal_$cshowList -}
25d8e83048567a92b4405fd5d28cea33
  $fShowVal1 :: Interpreter.Val -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Interpreter.Val) (w1 :: GHC.Base.String) ->
                 Interpreter.$w$cshowsPrec1 0# w w1) -}
d0da759bd8d099aff724e7eacafb3fd6
  $fShowVal2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B "#) -}
859f1e7d207c1ae8f0df4515048c6e60
  $fShowVal3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "I "#) -}
25d8e83048567a92b4405fd5d28cea33
  $fShowVal_$cshow :: Interpreter.Val -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Interpreter.Val) ->
                 Interpreter.$fShowVal_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
25d8e83048567a92b4405fd5d28cea33
  $fShowVal_$cshowList :: [Interpreter.Val] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Interpreter.Val
                   Interpreter.$fShowVal1) -}
25d8e83048567a92b4405fd5d28cea33
  $fShowVal_$cshowsPrec ::
    GHC.Types.Int -> Interpreter.Val -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Interpreter.Val)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Interpreter.$w$cshowsPrec1 ww1 w1 w2 }) -}
236a2cb4495ef012f5a5ec8a179e1058
  $fSmartAssignmentBool :: Interpreter.SmartAssignment GHC.Types.Bool
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Interpreter.$fSmartAssignmentBool_$cassign
                  `cast`
                (Sym (Interpreter.N:SmartAssignment[0] <GHC.Types.Bool>_N)) -}
13947b408e6f79e2d4c8cc504663901f
  $fSmartAssignmentBool_$cassign ::
    GHC.Base.String -> GHC.Types.Bool -> Interpreter.Statement
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (v :: GHC.Base.String) (b :: GHC.Types.Bool) ->
                 Interpreter.Assign v (Interpreter.Const (Interpreter.B b))) -}
236a2cb4495ef012f5a5ec8a179e1058
  $fSmartAssignmentExpr ::
    Interpreter.SmartAssignment Interpreter.Expr
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Interpreter.Assign
                  `cast`
                (Sym (Interpreter.N:SmartAssignment[0] <Interpreter.Expr>_N)) -}
236a2cb4495ef012f5a5ec8a179e1058
  $fSmartAssignmentInt :: Interpreter.SmartAssignment GHC.Types.Int
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Interpreter.$fSmartAssignmentInt_$cassign
                  `cast`
                (Sym (Interpreter.N:SmartAssignment[0] <GHC.Types.Int>_N)) -}
5ce7f4ea63d8cf921e4802d749299198
  $fSmartAssignmentInt_$cassign ::
    GHC.Base.String -> GHC.Types.Int -> Interpreter.Statement
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (v :: GHC.Base.String) (i :: GHC.Types.Int) ->
                 Interpreter.Assign v (Interpreter.Const (Interpreter.I i))) -}
870aac46b30d5cdb4c17bb778fe1f59d
  $sinsert_$sgo10 ::
    Interpreter.Name
    -> a1
    -> Data.Map.Base.Map Interpreter.Name a1
    -> Data.Map.Base.Map Interpreter.Name a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
22db1534147fa7f6996f2513fae07609
  $slookup1 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
03fa0591f400e91a29415678314c7b59
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5942770668283334088##
                   7257482361161682263##
                   Interpreter.$trModule
                   Interpreter.$tc'Add1) -}
c0b023b20419ef6ffafcbe1853351175
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
58ce47ced0d133765f406fb7835909ed
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18234471772563874176##
                   13308712026709545943##
                   Interpreter.$trModule
                   Interpreter.$tc'And1) -}
b6a2586ed0d97ca86d489314d549a5d0
  $tc'And1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'And"#) -}
85ea224484195973745e9b52c617360e
  $tc'Assign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1520068772166654561##
                   6953069147524693492##
                   Interpreter.$trModule
                   Interpreter.$tc'Assign1) -}
de962742f70ae12d53162524cca4b747
  $tc'Assign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Assign"#) -}
03207d579e97598b0703cca74a9bbf86
  $tc'B :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15396865306279179134##
                   8075420758937141531##
                   Interpreter.$trModule
                   Interpreter.$tc'B1) -}
17e71ff4fa39ea41e78030bbab065827
  $tc'B1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'B"#) -}
bc404afdc87d71eb07b24d1ddaf2c382
  $tc'C:PrettyExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16447301471641890715##
                   16062512822510719275##
                   Interpreter.$trModule
                   Interpreter.$tc'C:PrettyExpr1) -}
80435efa8c347f5c044dfc41a8390526
  $tc'C:PrettyExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:PrettyExpr"#) -}
c14007b8fb35e8c0e4e251997b59a351
  $tc'C:SmartAssignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6059243921576013534##
                   10062049711497759637##
                   Interpreter.$trModule
                   Interpreter.$tc'C:SmartAssignment1) -}
c7288331c90b565cf7531cf5c727a1a3
  $tc'C:SmartAssignment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SmartAssignment"#) -}
caba791c3e8b0a442bc3c0281874840c
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5520600791500658572##
                   8595841377267060036##
                   Interpreter.$trModule
                   Interpreter.$tc'Const1) -}
177cc6249a16885a9e1bfe3e9f0818db
  $tc'Const1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Const"#) -}
958fd06c3d64c8e96e5225bec0843ee1
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11025309590376743840##
                   14239783849446106384##
                   Interpreter.$trModule
                   Interpreter.$tc'Div1) -}
3e0c87dae87401f5c7ca53f7222ba272
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Div"#) -}
5ab7ab2cf275fe9706e20ee4dba8324b
  $tc'Eq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16085703406444657253##
                   16495625689255804680##
                   Interpreter.$trModule
                   Interpreter.$tc'Eq1) -}
2df58eefb546556d9b90c2ae85965ac0
  $tc'Eq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Eq"#) -}
6849dc7289638c0cb895df27a5133719
  $tc'Gt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17097950968619616389##
                   15768311941682442434##
                   Interpreter.$trModule
                   Interpreter.$tc'Gt1) -}
3497fa7095cbbf32a48980ee7457f4be
  $tc'Gt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gt"#) -}
5b595c0e7931a0a86b687ac1c0a6d359
  $tc'I :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1903679096787281379##
                   18112613070366894201##
                   Interpreter.$trModule
                   Interpreter.$tc'I1) -}
64212b00729554b7c7aacb819b3006dc
  $tc'I1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'I"#) -}
e2d3446a7efc3c33202abb0827613acd
  $tc'If :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12952415389013220382##
                   6260905125349110300##
                   Interpreter.$trModule
                   Interpreter.$tc'If1) -}
c0518994c04b650f0764c4bc1c4047e5
  $tc'If1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'If"#) -}
bebf93a540be84c1c687c99919c3d790
  $tc'Lt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12744089756784985429##
                   18264629296191903324##
                   Interpreter.$trModule
                   Interpreter.$tc'Lt1) -}
c15812b357efba1688ca465a25bb7082
  $tc'Lt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lt"#) -}
a3561f970fc4f0b0a302738c0c7d1d25
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5778907988689157924##
                   6131931825683873942##
                   Interpreter.$trModule
                   Interpreter.$tc'Mul1) -}
dd54e9825fc64d00f1cfccdc4b0b2662
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mul"#) -}
5167d3194722c7d7007886fd3c6a3a97
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6332273185566682960##
                   15913422047380213540##
                   Interpreter.$trModule
                   Interpreter.$tc'Not1) -}
67bbd473325b38eb57f50f5474cfabf7
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
70a6859caec536ced99adfdd6936bfe2
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4879156332479306437##
                   10874099518357192766##
                   Interpreter.$trModule
                   Interpreter.$tc'Or1) -}
e16d3e1a00f9564dd49c4fff61798820
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Or"#) -}
df57346cde07d5f791c5d13eef8a155a
  $tc'Pass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9658786346106230640##
                   6451268103163606886##
                   Interpreter.$trModule
                   Interpreter.$tc'Pass1) -}
535fe3b01c22ed28bc33ccdfb4407c6c
  $tc'Pass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pass"#) -}
c2e3184111463d489d4446575ec1a8e7
  $tc'Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18248383796320070893##
                   7996892723901416992##
                   Interpreter.$trModule
                   Interpreter.$tc'Print1) -}
fabf13efbd966b140882f140b00065d1
  $tc'Print1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Print"#) -}
bf4815626ad3eac7fdf2876e469f0a65
  $tc'ProgramState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17399140201365757256##
                   13112346206777077549##
                   Interpreter.$trModule
                   Interpreter.$tc'ProgramState1) -}
f875f03e0904fb490d3b682302907775
  $tc'ProgramState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ProgramState"#) -}
afeb76cf4b56e011640c7f8461d77350
  $tc'Seq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17813585213523373542##
                   13822888614816373427##
                   Interpreter.$trModule
                   Interpreter.$tc'Seq1) -}
5572c71ecfdc3b25b46a4d32568bc674
  $tc'Seq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Seq"#) -}
bc57163a93203733519c5727bd6f30ae
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18233277894640784927##
                   12731475794387380509##
                   Interpreter.$trModule
                   Interpreter.$tc'Sub1) -}
88481e0a69050d8d5a5a30cdffa6f32a
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sub"#) -}
7ca963a90b7def6e209cba35e4fa15d3
  $tc'Try :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6352417077143040985##
                   4926659473870849100##
                   Interpreter.$trModule
                   Interpreter.$tc'Try1) -}
2aadea073adacaf6c1f39d39c5bde59e
  $tc'Try1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Try"#) -}
58f0567a9fc90a9aa179fa0e3fefbccb
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17126602925854819553##
                   10116759307082216524##
                   Interpreter.$trModule
                   Interpreter.$tc'Var1) -}
56078bf26371b93fca2c2932de195c4e
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
4f8e55d22ab37baa3cc64ba9d04419b7
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10009500313582800621##
                   37350505531226623##
                   Interpreter.$trModule
                   Interpreter.$tc'While1) -}
56d15d56ed1b12c10e93b82ba6ac9a6a
  $tc'While1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'While"#) -}
1d7ae3494240335e2b06031f40d8eef8
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4591307798988228565##
                   11529044271922537101##
                   Interpreter.$trModule
                   Interpreter.$tcExpr1) -}
8cd6a53b7fa83646b858d030f02bdefa
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expr"#) -}
b5f102c80849675d479709c0e73544ee
  $tcPrettyExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7215605395186787940##
                   17220035031109137273##
                   Interpreter.$trModule
                   Interpreter.$tcPrettyExpr1) -}
ba12db0ab97cd5fdce930cb213fd9fcc
  $tcPrettyExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PrettyExpr"#) -}
f4678cdffb5df01dbc448cce1ec2c0e1
  $tcProgramState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4056425060629273079##
                   1722009185931834669##
                   Interpreter.$trModule
                   Interpreter.$tcProgramState1) -}
690322e9f71be8d68b89ac17a4cd559c
  $tcProgramState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ProgramState"#) -}
42559ec7b67fb83943c2e0a19e4e15e9
  $tcSmartAssignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12676233142887760986##
                   8165105553620860926##
                   Interpreter.$trModule
                   Interpreter.$tcSmartAssignment1) -}
1097a6496d82e14cc90ccc4f47b4edbf
  $tcSmartAssignment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SmartAssignment"#) -}
fa86814f5fa47ba3e4d21728ed8ec6db
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6107926905458121812##
                   1238096239817467779##
                   Interpreter.$trModule
                   Interpreter.$tcStatement1) -}
7d3131a0050e416f50f005371b5683e2
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Statement"#) -}
2213b529cc3c3c78bd8ae2979051d024
  $tcVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9140299320509997203##
                   3582329629211451868##
                   Interpreter.$trModule
                   Interpreter.$tcVal1) -}
168013be98f9524314b3b6e17e91ec1d
  $tcVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Val"#) -}
031e7345a1a316cb70d0f721f35e7c79
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Interpreter.$trModule2
                   Interpreter.$trModule1) -}
0121ef6a6f937303006b04c158249b53
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Interpreter"#) -}
464ef3f1b577b442c28fdd5e45fe7768
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "interpreter-0.1.0.0-4t3ZNL3Kouy2a8LgHlUI1M"#) -}
34b9940d7762acc4d3206d814cf7564d
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Interpreter.Expr -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
25d8e83048567a92b4405fd5d28cea33
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Interpreter.Val -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Interpreter.Val -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   karg :: Text.ParserCombinators.ReadP.P b
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww 10#) of wild2 {
                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                       GHC.Types.True
                       -> let {
                            lvl80 :: Text.ParserCombinators.ReadP.P b
                            = let {
                                lvl81 :: Text.ParserCombinators.ReadP.P b
                                = GHC.Read.$woptional1
                                    @ b
                                    (\ (a1 :: GHC.Types.Bool) -> w (Interpreter.B a1))
                              } in
                              Text.Read.Lex.expect2
                                @ b
                                (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                 case a1 of wild {
                                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                   Text.Read.Lex.Ident a2
                                   -> case GHC.Base.eqString a2 Interpreter.$fReadVal6 of wild1 {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                        GHC.Types.True -> lvl81 } })
                          } in
                          let {
                            k :: () -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                 Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                            = \ (w4 :: ()) -> lvl80
                          } in
                          Text.ParserCombinators.ReadP.Look
                            @ b
                            (\ (a :: GHC.Base.String) ->
                             (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                               `cast`
                             (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                               @ b
                               k) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False
                   -> Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        @ b
                        (Text.ParserCombinators.ReadP.Fail @ b)
                        karg
                   GHC.Types.True
                   -> let {
                        lvl80 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl81 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadInt3
                                 GHC.Read.$fReadInt_$sconvertInt
                                 Interpreter.$fReadVal5)
                                `cast`
                              (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                                @ b
                                (\ (a1 :: GHC.Types.Int) -> w (Interpreter.I a1))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Interpreter.$fReadVal4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl81 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                        = \ (w4 :: ()) -> lvl80
                      } in
                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        @ b
                        (Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k))
                        karg }) -}
34b9940d7762acc4d3206d814cf7564d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Interpreter.Expr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
25d8e83048567a92b4405fd5d28cea33
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Interpreter.Val -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Interpreter.Val)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Interpreter.I b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Interpreter.$fShowVal3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Interpreter.$fShowVal3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Interpreter.B b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Interpreter.$fShowVal2
                            (case b1 of wild1 {
                               GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows21 x
                               GHC.Types.True
                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows20 x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)) } }) -}
43cc4f4fec732567121f44ae8dd49f14
  $wrun ::
    Interpreter.Statement
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Interpreter.Statement)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Interpreter.run4
                        ww
                        Interpreter.initialProgramState
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left exn
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString
                              (GHC.CString.unpackAppendCString# "Uncaught exception: "# exn)
                              Interpreter.run2))
                        GHC.Types.True
                        ipv
                   Data.Either.Right ds
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds2 of wild2 { () -> (# ipv, GHC.Tuple.() #) } } } }) -}
3fcceb5c8ae3c525f1bfa1275e8b0cf7
  type Env = Data.Map.Base.Map Interpreter.Name Interpreter.Val
de6164e56d1c3d648dc41a5013678183
  type Eval a =
    Control.Monad.Trans.Reader.ReaderT
      Interpreter.Env
      (Control.Monad.Trans.Except.ExceptT
         GHC.Base.String Data.Functor.Identity.Identity)
      a
34b9940d7762acc4d3206d814cf7564d
  data Expr
    = Const Interpreter.Val
    | Add Interpreter.Expr Interpreter.Expr
    | Sub Interpreter.Expr Interpreter.Expr
    | Mul Interpreter.Expr Interpreter.Expr
    | Div Interpreter.Expr Interpreter.Expr
    | And Interpreter.Expr Interpreter.Expr
    | Or Interpreter.Expr Interpreter.Expr
    | Not Interpreter.Expr
    | Eq Interpreter.Expr Interpreter.Expr
    | Gt Interpreter.Expr Interpreter.Expr
    | Lt Interpreter.Expr Interpreter.Expr
    | Var GHC.Base.String
ef5f4a1ceeefcc1ba56178ec6d1d6d32
  type Name = GHC.Base.String
b9275a12289d3a1807a641f5c38be4dd
  class PrettyExpr a b where
    (.*) :: a -> b -> Interpreter.Expr
    (.-) :: a -> b -> Interpreter.Expr
    {-# MINIMAL (.*), (.-) #-}
b7972dd0f39e87b775ca40d6295ca378
  type Program =
    Control.Monad.Trans.Writer.Lazy.Writer Interpreter.Statement ()
c035ac3abe88d1a34647d54dd24ae9fa
  data ProgramState = ProgramState {envs :: [Interpreter.Env]}
6cc7311dc298b6a1011ec672e64ec815
  type Run a =
    Control.Monad.Trans.State.Lazy.StateT
      Interpreter.ProgramState
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
      a
236a2cb4495ef012f5a5ec8a179e1058
  class SmartAssignment a where
    assign :: GHC.Base.String -> a -> Interpreter.Statement
    {-# MINIMAL assign #-}
67e54eba5d182beb65be48de09c11740
  data Statement
    = Assign GHC.Base.String Interpreter.Expr
    | If Interpreter.Expr Interpreter.Statement Interpreter.Statement
    | While Interpreter.Expr Interpreter.Statement
    | Print Interpreter.Expr
    | Seq Interpreter.Statement Interpreter.Statement
    | Try Interpreter.Statement Interpreter.Statement
    | Pass
25d8e83048567a92b4405fd5d28cea33
  data Val = I GHC.Types.Int | B GHC.Types.Bool
5218e3fe55df4bbc595ee69aa21e6440
  envs :: Interpreter.ProgramState -> [Interpreter.Env]
  RecSel Left Interpreter.ProgramState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Interpreter.ProgramState) ->
                 case ds of wild { Interpreter.ProgramState ds1 -> ds1 }) -}
3e54afe0df66f32505350a0838b95046
  initialProgramState :: Interpreter.ProgramState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Interpreter.ProgramState Interpreter.run3) -}
c66742f2b54424ec2aea41e0333a3501
  run :: Interpreter.Program -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Interpreter.run1
                  `cast`
                (<Interpreter.Program>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bf4e5523fb0f1b22dbe2c28f50787ed0
  run1 ::
    Interpreter.Program
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Interpreter.Program)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w `cast`
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                <Interpreter.Statement>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N)
                           (Data.Functor.Identity.N:Identity[0]
                                <((), Interpreter.Statement)>_R)) of ww { (,) ww1 ww2 ->
                 Interpreter.$wrun ww2 w1 }) -}
5f1471c6da393e05d689f92ef49036b8
  run2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
153831703e53026b0191b373fd613287
  run3 :: [Interpreter.Env]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Interpreter.Env
                   (Data.Map.Base.Tip @ Interpreter.Name @ Interpreter.Val)
                   (GHC.Types.[] @ Interpreter.Env)) -}
a575c0b9a18fa2962e65b21d73725778
  run4 ::
    Interpreter.Statement
    -> Interpreter.ProgramState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Base.String ((), Interpreter.ProgramState) #)
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><S,U> -}
instance [safe] GHC.Classes.Eq [Interpreter.Expr]
  = Interpreter.$fEqExpr
instance [safe] GHC.Classes.Eq [Interpreter.Statement]
  = Interpreter.$fEqStatement
instance [safe] GHC.Classes.Eq [Interpreter.Val]
  = Interpreter.$fEqVal
instance [safe] GHC.Base.Monoid [Interpreter.Statement]
  = Interpreter.$fMonoidStatement
instance [safe] Interpreter.PrettyExpr [[], GHC.Types.Int]
  = Interpreter.$fPrettyExpr[]Int
instance [safe] Interpreter.PrettyExpr [[], []]
  = Interpreter.$fPrettyExpr[][]
instance [safe] GHC.Read.Read [Interpreter.Expr]
  = Interpreter.$fReadExpr
instance [safe] GHC.Read.Read [Interpreter.Statement]
  = Interpreter.$fReadStatement
instance [safe] GHC.Read.Read [Interpreter.Val]
  = Interpreter.$fReadVal
instance [safe] GHC.Show.Show [Interpreter.Expr]
  = Interpreter.$fShowExpr
instance [safe] GHC.Show.Show [Interpreter.Statement]
  = Interpreter.$fShowStatement
instance [safe] GHC.Show.Show [Interpreter.Val]
  = Interpreter.$fShowVal
instance [safe] Interpreter.SmartAssignment [GHC.Types.Bool]
  = Interpreter.$fSmartAssignmentBool
instance [safe] Interpreter.SmartAssignment [Interpreter.Expr]
  = Interpreter.$fSmartAssignmentExpr
instance [safe] Interpreter.SmartAssignment [GHC.Types.Int]
  = Interpreter.$fSmartAssignmentInt
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

